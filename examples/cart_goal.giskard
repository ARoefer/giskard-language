import "math.giskard"



def robot_pr2: {
	# Joint Positions
	j_torso_lift      = input("torso_lift_joint");
	j_shoulder_pan_l  = input("l_shoulder_pan_joint");
	j_shoulder_lift_l = input("l_shoulder_lift_joint");
	j_upper_arm_roll_l= input("l_upper_arm_roll_joint");
	j_elbow_flex_l    = input("l_elbow_flex_joint");
	j_forearm_roll_l  = input("l_forearm_roll_joint");
	j_wrist_flex_l    = input("l_wrist_flex_joint");
	j_wrist_roll_l    = input("l_wrist_roll_joint");
	j_shoulder_pan_r  = input("r_shoulder_pan_joint");
	j_shoulder_lift_r = input("r_shoulder_lift_joint");
	j_upper_arm_roll_r= input("r_upper_arm_roll_joint");
	j_elbow_flex_r    = input("r_elbow_flex_joint");
	j_forearm_roll_r  = input("r_forearm_roll_joint");
	j_wrist_flex_r    = input("r_wrist_flex_joint");
	j_wrist_roll_r    = input("r_wrist_roll_joint");

	# Robot
	torso_lift     = frame(rotation(unitX, 0),                vec3(-0.05, 0, 0.739675 + j_torso_lift));
	
	shoulder_pan_l   = frame(rotation(unitZ, j_shoulder_pan_l),   vec3(0, 0.188, 0));
	shoulder_lift_l  = frame(rotation(unitY, j_shoulder_lift_l),  vec3(0.1, 0, 0));
	upper_arm_roll_l = frame(rotation(unitX, j_upper_arm_roll_l), vec3(0, 0, 0));
	elbow_flex_l     = frame(rotation(unitY, j_elbow_flex_l),     vec3(0.4, 0, 0));
	forearm_roll_l   = frame(rotation(unitX, j_forearm_roll_l),   vec3(0, 0, 0));
	wrist_flex_l     = frame(rotation(unitY, j_wrist_flex_l),     vec3(0.321, 0, 0));
	wrist_roll_l     = frame(rotation(unitX, j_wrist_roll_l),     vec3(0, 0, 0));
	gripper_offset_l = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));
	
	shoulder_pan_r   = frame(rotation(unitZ, j_shoulder_pan_r),   vec3(0, -0.188, 0));
	shoulder_lift_r  = frame(rotation(unitY, j_shoulder_lift_r),  vec3(0.1, 0, 0));
	upper_arm_roll_r = frame(rotation(unitX, j_upper_arm_roll_r), vec3(0, 0, 0));
	elbow_flex_r     = frame(rotation(unitY, j_elbow_flex_r),     vec3(0.4, 0, 0));
	forearm_roll_r   = frame(rotation(unitX, j_forearm_roll_r),   vec3(0, 0, 0));
	wrist_flex_r     = frame(rotation(unitY, j_wrist_flex_r),     vec3(0.321, 0, 0));
	wrist_roll_r     = frame(rotation(unitX, j_wrist_roll_r),     vec3(0, 0, 0));
	gripper_offset_r = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));

	# Frame chains
	elbow_l = torso_lift * shoulder_pan_l * shoulder_lift_l * upper_arm_roll_l * elbow_flex_l ;
	wrist_l = elbow_l * forearm_roll_l * wrist_flex_l * wrist_roll_l;
	ee_l = wrist_l * gripper_offset_l ;

	elbow_r = torso_lift * shoulder_pan_r * shoulder_lift_r * upper_arm_roll_r * elbow_flex_r ;
	wrist_r = elbow_r * forearm_roll_r * wrist_flex_r * wrist_roll_r;
	ee_r    = wrist_r * gripper_offset_r ;

	# Weights
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightTorso = 0.001;
	weightArm   = 0.001;


	# Outputs
	out.elbow_l = elbow_l;
	out.ee_l    = ee_l;

	out.elbow_r = elbow_r;
	out.ee_r    = ee_r;

	out.controllableConstraints = [
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, j_torso_lift, "j_torso_lift"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_shoulder_pan_l, "j_shoulder_pan_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_shoulder_lift_l, "j_shoulder_lift_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_upper_arm_roll_l, "j_upper_arm_roll_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_elbow_flex_l, "j_elbow_flex_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_forearm_roll_l, "j_forearm_roll_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_wrist_flex_l, "j_wrist_flex_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_wrist_roll_l, "j_wrist_roll_l"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_shoulder_pan_r, "j_shoulder_pan_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_shoulder_lift_r, "j_shoulder_lift_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_upper_arm_roll_r, "j_upper_arm_roll_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_elbow_flex_r, "j_elbow_flex_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_forearm_roll_r, "j_forearm_roll_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_wrist_flex_r, "j_wrist_flex_r"),
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, j_wrist_roll_r, "j_wrist_roll_r")];	

	out.hardConstraints = [
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift),
	# Left arm constraints
	hardConstraint(-0.5646 - j_shoulder_pan_l,  2.1353 - j_shoulder_pan_l,   j_shoulder_pan_l),
	hardConstraint(-0.3536 - j_shoulder_lift_l, 1.2963 - j_shoulder_lift_l,  j_shoulder_lift_l),
	hardConstraint(-0.65   - j_upper_arm_roll_l,  3.75 - j_upper_arm_roll_l, j_upper_arm_roll_l),
	hardConstraint(-2.1213 - j_elbow_flex_l,     -0.15 - j_elbow_flex_l,     j_elbow_flex_l),
	hardConstraint(-2.0    - j_wrist_flex_l,      -0.1 - j_wrist_flex_l,     j_wrist_flex_l),	
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan_r,  0.5646 - j_shoulder_pan_r,   j_shoulder_pan_r),
	hardConstraint(-0.3536 - j_shoulder_lift_r, 1.2963 - j_shoulder_lift_r,  j_shoulder_lift_r),
	hardConstraint(-3.75   - j_upper_arm_roll_r,  0.65 - j_upper_arm_roll_r, j_upper_arm_roll_r),
	hardConstraint(-2.1213 - j_elbow_flex_r,     -0.15 - j_elbow_flex_r,     j_elbow_flex_r),
	hardConstraint(-2.0    - j_wrist_flex_r,      -0.1 - j_wrist_flex_r,     j_wrist_flex_r)];
};

def axisAlignment: {
	axisA = inputVec3("a");
	axisB = inputVec3("b");
	dot = axisA * axisB;
	err = 1 - dot;
	out = softConstraint(err, err, input("weight"), dot, "Axis alignment");
};

def rotationAlignment: {
	rotA = inputRot("a");
	rotB = inputRot("b");
	weight = input("weight");
	out = [axisAlignment(a * unitX, b * unitX, weight), axisAlignment(a * unitZ, b * unitZ, weight)];
};

def positionAlignment: {
	posA = inputVec3("a");
	posB = inputVec3("b");
	dist = norm(posA, posB);
	err = -dist;
	out = softConstraint(err, err, input("weight"), dist, "Position alignment");
};

def frameAlignment: {
	frameA = inputFrame("a");
	frameB = inputFrame("b");
	weight = inputFrame("weight");
	out = rotationAlignment(frameA.rot, frameB.rot, weight) + positionAlignment(frameA.pos, frameB.pos, weight);
};

# Aligns the gripper's and goal's frames
def controller_cart_goal: {
	robot = robot_pr2(!EXPOSE);
	goal = inputFrame("goal");

	out = QP(robot.controllableConstraints,
			 frameAlignment(robot.ee_r, goal, 1),
			 robot.hardConstraints);
};
